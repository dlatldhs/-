비트 필드(bit field) :자료 구조
: 하나의 비트나 여러 비트의 그룹의 주소를 참조할 수 있도록 저장됨
특정 비트를 지우는데 유용하게 사용함

플래그(flag) : 특정 동작의 즉각적인 상태 / 결과 제어 인지 를 위해(상태변수라고 생각하면 됨)
flag => 어떤 정보를 저장하기 위한 것(상태 변수)
int flag[4] => int 4byte 16byte가 필요함 -> 0또는 1밖에 안들어감 -> 2진 분류
falg 연산은 기존의 값을 바꾸지 않고 새로운 비트만 추가할 수 있다.

Q 플래그를 사용하는 이유???
A 플래그는 적은 공간에 정보를 저장해야함
  빠른 속도가 필요할 때 사용함
  예를 들자면 CPU임 
  ---> CPU는 내부 저장 공간이 매우 작기에 각종 상태를 비트로 저장함
* 1 => 2^0(0번 비트1)로 만든 거

배열로 플래그 처리
int main(){
	int flag[4] = {0,};
	int i;
	flag[0] = 1;
	flag[3] = 1;
	for(i=0; i<4; i++)
	if( flag[i] )
	printf("%d\n", i );
	flag[3] = 0;
} 
--> 이렇게 하면 1. 배열낭비(메모리 낭비)
그래서 비트 필드를 사용함
flag = flag | 1;
flag = flag | 8;
for(i=0; i<4; i++)
if( flag & ( 1<<i ) )
printf("%d\n", i );
flag = flag & ~8; 
보면 |  이거는 OR임
참고(flag = 0)
맨 첫번째꺼는
0000
0001 
이거 둘이 OR 하는거임 그래서 새로운 값을 추가하는 거임
근데 OR이라서 삭제는 안됨 뺴기는 안됨 Only 더하기 아마도? /

쉬프트 연산(Shift 연산) >> <<
왼쪽 또는 오른쪽으로 비트를 옮긴다.
0000 1010 << 2 = 0010 1000
0000 1010 >> 2 = 0000 0010

부족한 개념&이해 혹은 기억 안나는 개념
마스크 연산(masking)
비트 관련 연산 중 AND 연산은 생각보다 자주 사용함
어떤 값을 비트 1과 AND 연산을 하면 해당 부분은 그대로 나올꺼고
반대로 비트 0 과 AND 연산을 한다면 해당부분은 0으로 나옴
이 개념을 이용해 필요한 부분만을 추출하는 연산을 마스크 연산 혹은 마스킹이라고 함 ㅇㅇ
