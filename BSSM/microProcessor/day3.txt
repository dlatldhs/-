리눅스에서 윈도우 접근 할 때
/mnt/C(Driver Char)/VScode/bin/code

VS code 와 리눅스 환경을 통합할 때
Remote WSL


윈도우 경로 : C:\VSCode\bin
WSL 리눅스  : /mnt/c/VSCode/bin

메모장 실행
notepad.exe

리눅스에서 . 은 현재 directory 를 나타냄

리눅스 안에서 vscode를 실행하면 바로 됨
리눅스 bashrc 하면 path 나옴(.bashrc 에서 바꾸는거)
export PATH = $PATH:($PATH 는 현재 PATH임)


리눅스에서는 환경변수가 path로 되어 있음

리눅스에서 환경 변수 볼 때
echo $PATH

리눅스에서 home directory 로 이동할 때 2가지
cd 하고 Enter 치는거랑 cd ~ 2가지 있음

prefix --> ++i;
posfix --> i++;

1 문제 정의

1) 입력 형식
2) 처리 규칙
3) 출력 형식

#if 0
int main(void){
    float opd1,opd2;
    char op;

    input(&opd1,&op,&opd2);
    printf("%f %c %f\n",opd1,op,opd2);
}
#endif
이렇게 하면 if 0 이면 endif 까지 안하는거고 1이면 하는거

실행 형식
1 . 일회성( 데이터를 재활용 안함)
2 . 연속성 ( 데이터를 계속 다음에도 쓰는 거 데이터 재사용 데이터 저장 같은 개념이 있는 파일)

중요한 거 {
	헤더파일을 만드는 이유
	ex) input.h , outuput.h
	compolier 가 c 파일을 컴파일 할 때 하나 씩 컴파일을 하는데 만약 다른 곳에 정의된 함수를 쓴다면
	에러가 걸리기 때문에 헤더 파일을 주면서 다른 곳에 정의된 함수가 여기서 제대로 쓰인게 맞는건지
	확인만 하고 컴파일에 에러가 없게 만들기 위해서 헤더파일이 존재하는거임
	C 언어는 선언문이 하나만 나와야 함
	header file에 있는 선언문과 main 에 있는 선언문은 서로 다른거임
	
	데이터 정의가 중복되지 않게 하는 코드 나중ㅇ ㅔ 읽기 
	
	#ifndef _CACL_DATA_H_   < -- 심볼이 있으면 실행 안함 없으면 실행
	#define _CACL_DATA_H_    < -- 그리고 다시 재 정의
	
	typedef struct calc_data{// 형 이름을 재 정의 하는거
	    float opd1;
	    char op;
	    float opd2;
	}calc_data_t;
	#endif
}
