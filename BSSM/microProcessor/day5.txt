개념 정리
* 멀티 스레드 : 하나의 프로세스 내에서 둘 이상의 스레드가 동시에 작업을 수행하는 것
* 부모/자식 프로세서
	부모 프로세서 : 프로세서를 만든 프로세서
	자식 프로세서 : 만듬 당한 프로세서
* 스레드 - 프로세서에 비해 자원을 덜 차지함
* 동시성 - 동시에 처리해서 속도가 느려지지 않아 빨라지는게 아님 X
       -> 처리하는 인원이 늘어나면서 동시에 처리함 -> 작업량이 줄어듬 -> 시간이 줄어든거임
       -> 자업 효율이 올라감 작업량을 더 늘릴 수 있음

* 멀티 프로세서 - 여러 개의 프로세서가 한가지 일을 협력하여 처리하는 것
참고) 메모리에 있는 프로그램을 실행하면 프로세서가 됨
	더 느리게 보내는 건 오류가 덜함 but 더 빠르게 보내면 오류가 많을 수 있음(클럭)
	
* 컨텀점프 - 상위 개념을 보면 하위개념이 이해됨

* 경량 프로세스 - 스레드 약간 이런 개념

int gpio_pin_direct_reg; < -- 이렇게 변수 명을 길게 적으면 코드의 가독성이 높아짐
가독성이 높아진다 = 코드를 이해하기 쉬워짐 but 현업에서는 이렇게 길게 안씀

#include <stdio.h>

int main(){
    // 메모리 할당, 프로세서 연산
    int a;     // 프로세서(cpu) 연산 (사칙,논리(비트,관계)),대입(메모리연산))
    int* p;    // 메모리 접근 연산(대입,주소번지에 대한 증/감,역참조)
    int c[1];  // 메모리 접근 연산(대입, 주소번지+오프셋), 프로세스 연산
    int* d[1]; // 메모리 접근 연산
}

    a = 1 메모리 연산(쓰기)
    x = a 메모리 연산(읽기)
    a + 1 <-- 이건 메모리가 아님 프로세서 연산임

    a[1]; [1] <-- offset    a는 Base Address a옆에 있는건 offset임
    
    a[1] = 1  === *(a+1) = 1

    *(a+1) 은 산술논리 계산하는게 아님 메모리 계산임

void* gpio_pin_1(void* unuse){// 전달인자 안받음 -> void* 유지 // unuse 안쓴다는거 pin 이거를 16개 만들어야 됨

숙제 : 16개의 레지스터를 만들기(GPIO)
