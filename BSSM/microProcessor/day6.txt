컴퓨터 하드웨어 + 소프트웨어

하드웨어
BUS 각 구성 요소들을 연결하는 데이터 통로

컴퓨터의 기본 구성 요소

	입력 장치 encoder encoding encode
	 컴퓨터가 처리할 수 있는 형태(2진수)로 데이터/명령을 받아 들임
	
	프로세서(Central Processing Unit)
	 컴퓨터 명령어 수행(연산 등)
	
	출력 장치 decoder decoding decode
	 데이터를 사람이 이해할 수 있는 형태로 출력
	
	저장장치
	 데이터나 프로그램 보고나하기 위한 디스크 등
	
	주변 장치( Peripheral Equipment )
	 I/O unit 보조 memory
	 
1. 입력 장치 typing ,pointing ,scanning, terminal 
==> 컴퓨터가 이해가능한 2진수로 바뀜

2. 중앙 처리 장치 (Centeral Processing Unit)
프로세서(Processor)
 프로그램을 실행
 입출력 저장장치 제어

GPU(Graphic Processing Unit)
2/3D 그래픽 처리에 특화된 microprocessor

GPGPU(General Purpose GPU)
 GPU 를 CPU 처럼 '범용' 처리장치로 활용
 -> 요즘은 하나로 묶여서 나옴

CPU = ALU(산술 논리 연산) + CU(Control Unit) + Register
 ALU(Arithmetic Logic Unit)<- 계산만 하는애
 CU <- ALU 한테 계산을 해라고 시키는 애	 

정보 처리 성능 word = 한번에 처리할 수 있는 크키
8-bit Machine : 한번에 1byte 씩 처리
64-bit Machine : 8byte
word : CPU가 한번에 처리 가능한 크키/한번에 데이터를 읽고 쓰는 단위
보통 int가 word 크키 정보 됨

컴퓨터 처리 속도
MHz/GHz : 초당 처리 되는 machin cycle의 수
MIPS(정수 계산에 보통 쓰임) :Million Instruction Per Second
MFLOPS : MIPS 보다 더 큼 실수에 쓰임(계산)Million Floating-piont Operation Per Seconde

기억 용량 표현 (2진법,digital)
KB : 2^10 bytes =1024 bytes
MB : 2^20
GB : 2 ^30

주 기억 장치
 프로그램 수행을 위해 필요한 정보에 비해 `레지스터`의 용량은 너무 작음
 정보를 저장해 ㅍㄹ요할 때 읽어서 함(명령어(프로그램)과 데이터 저장)
 
 Address를 통해 자료의 위치 지정 
 word 크기에 따라 성능 달라짐
 Access time(말 그대로)
 Cycle time = Access time + 대기 시간	 

Random Access Memory
- 휘발성 memory
- RAM SIZE 는 프로그램 수행 속도에 영향을 줌
- CPU 직접 접근이 가능한 장치
  Static RAM
  - refresh X
  - 재충천 필요,전력소모 적음
  Dynamic RAM
  - refresh O
  - Sram 보다 비교적 쌈
  
Rom 은 거의 안 써서 몰라도 됨
 
Cache(캐시) 나중에 내가 필기해논거 보기(컴구)
  - register Main memory 사이를 보조하는 Cache memory

etc )
	(magnetic memory를 보조 기억장치로 많이 씀)
	반도체는 오랫동안 데이터를 저장 할 수 없음
	데이터 오래 보관 / 안정적  = 하드 디스크
           	only 빠른 속도 = SSD

chshe 메모리 안에 데이터가 있을 확률 = hit 률(히트율)
chshe 메모리 안에 데이터가 없을 확률 = miss 률

chshe 메모리 안에 데이터가 없으면 메인 메모리 안에 가서 데이터를 가져옴
---> 그리고 그 데이터를 레지스터 안에 옮김

메모리 스왑 shap
 - 보조 기억 장치를 주 기억장치처럼 쓰는거
 - 속도는 엄청 느린데 주 기억 장치 보다 큰 프로그램을 실행가능함
 - 운영체제로 인해 주 기억 장치와 (보조 기억 장치 스왑공간) 블록 교체 됨?

5. 보조 기억 장치
: 영구적으로 기억할 수 있는 기억장치
  m.2 기반의 ssd를 요즘 많이 씀
  
  5-1) ssd / flash memory 
  
  5-2) Cpu와 메로리를 병렬로 주로 연결함
   - 보통 주소는 바이트 단위로 할당 됨 / 데이터 접근 할 때 워드 만큼 가져옴 
   - 근데 워드 크기에 벗어나면 가져오는 시간이 더 많이 걸림
     ex) word = 2byte 
     2바이트 데이터를 가져오는데 시간은 일반적인데
     1바이트 는 워드 크기 즉 2바이트 만큼 가져오고 1바이트를 잘라냄 --> 이렇게 처리함
     so 결과론적으로는 64 bit 정도의 데이터를 많이 사용하는 컴은 64bit 가 좋겠지만 아니라면 느릴 수도 있음-> 무조건 좋은 게 아님

6. 컴퓨터 동작 방식(Revisited)
	- Von Neumann 구조
	명령어/데이터를 동등하게 기억 장치에 저장 = 구분 없이 저장
	
	- 하버드 구조
	명령어와 데이터를 나눠서 저장 = 구분 있게 저장 -> data/command 를 동시에 할 수 있음
	
	C 언어 디코딩 인코딩(예시)
	scanf(%s<= string으로 인코딩) <-- 키보드로 입력을 받음 인코딩
	printf(%d <= 정수로 디코딩) <-- 화면으로 사람이 볼 수 있게 출력함 디코딩

7. 문자의 표현
Unicode (2byte)
	- UTF(Unicode Transformation Format) encodings
8. CPU 구현 
	SOC - System ON CHIP 칩 안에 시스템 들어간다 라는 뜻
	시간이 지날 수록 점점 성능이 안 좋아짐
	--> 발열 -> 노이즈 -> 그래픽 카드 등 수명 압축 ==> 오래 쓴거는 쉽게 고장날 확률 up

9. cpu 명령어 구현 방식
	CISC
	Complex Instruction Set Computer
	복잡한 내무 명령어를 많이 가짐
		
	RISC
	Reduced Instruction SEt Computer
	필수적인 명령어만 제공함
	ex) ARM chip 이 RISC chip 임
	
10. 파이프 라인(Pipeline)
    1단계 : Instruction Fetch
     명령어를 메모리에서 가져옴
    2단계 : Instruction Decode 
    	명령어를 해석
    3단계 : Execution 
    	명령어 실행
    4단계 : Memory access 
    	특정 위치에 접근
    5단계 : Write Back 
    	레지스터에 다시 씀

11. 멀티코어 프로세서
: 하나의 IC 칩에 여러 독립적인 프로세서(core)를 둔 프로세싱 시스템
->cpu안에 코어가 듀얼 코어 이상인 것

12. Unio

int a;
int a2;
메모리 공간이 각각 다르게 잡음
	
int a[2]
이거는 배열이니까 다 같은 공간을 잡음

union -> 가장 큰 공간 하나만 만들어줌(공용체)
ex) 
int a;
char b; 
하면 int 4byte 공간을 만들어줌
그래서 a를 사용하면 4byte 주고
b 쓰면 1byte 줌








