full pointer type

int (*fp)(int, int);
위에 코드 처럼
일일이 반환값 자료형과 매개변수 자료형을 명시하는 방식을 full pointer type 

이때 typedef로 별칭을 정의하면 함수 포인터를 매번 만들지 않고도 선언가능하다

ex)
 typedef int (*fp)(int ,int);
 typedef 반환값자료형 (*함수포인터별칭)(매개변수자료형1,매개변수자료형2)
 
여기서 주의 해야할 점은 매개변수 자료형을 줘야한다는 것이다.
 
typedef function pointer example)
 int add(int a,int b)
 {
 	return a+b;
 }

typedef int (*FP)(int,int); // FP를 함수 포인터 별칭으로 정의

FP getadd() --> 함수 포인터 별칭을 반환값으로 지정
{
	return add; -> add 함수의 메모리 주소를 반환
}

다양하게 사용하는 방법
1. 구조체 멤버로도 사용가능
struct Calc {
    FP fp;   // 함수 포인터 별칭을 구조체 멤버 자료형으로 사용
};

2. 함수 포인터 별칭을 매개 변수 자료형으로도 사용가능함 -> 함수형으로 자료형을 줄 수 있다는거
void executer(FP fp)    // 함수 포인터 별칭을 매개변수 자료형으로 사용
{
    printf("%d\n", fp(70, 80));
}

추가로 알고 있으면 도움 될만한 포인터 사용방법 예시
int *p,*o,*i; ==> int형 포인터 변수 p,o,i 선언
int* p, o, i; ==> int형 포인터 변수 p 선언 그리고 int 형 o,i 선언

memset() -> 메모리 초기화 시켜주는 함수
메모리의 내용(값)을 원하는 크기만큼 특정 값으로 세팅할 수 있느 함수
memory + setting 이렇게 기억하면 편할듯

함수 원형
void* memset(void* ptr,int value,size_t num);
첫번째 인자 메모리의 시작주소
주소를 가리키고 있는 포인터가 위치하는 자리

두번째 인자 메모리에 세팅하고 하는 값
int 타입으로 받지만 내부에서는 unsigned char로 변환되어서 저장함
--> 결론 'a'같은 문자를 넣어도 무방하다

세번쨰 인자 길이를 뜻함
이 길이는 바이트 단위

반환값은 성공하면 첫번째 인자로 들어간 ptr을 반환하고
실패한다면 NULL을 반환함

헤더파일은 memory.h or string.h 두개 다 memset 함수가 정의되어 있다
